plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
}

group = 'com'
version = '1.2.0-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

    // DB
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    // S3Bucket
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.282'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.1000'

    // redis
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.4.10'

    // Embedded Redis
    testImplementation ('it.ozimov:embedded-redis:0.7.2') { exclude group: "org.slf4j", module: "slf4j-simple" }
    implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

    // Slack
    implementation 'com.slack.api:slack-api-client:1.29.0'

    // OAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jar {
    enabled = false
}

tasks.register('updateVersion') {
    doLast {
        def currentVersion = ''
        def ymlFile = file('src/main/resources/application.yml')
        ymlFile.text.split('\n').each {
            if (it.startsWith('version: ')) {
                currentVersion = it.split(' ')[1]
            }
        }

        def increment = project.properties['increment']
        def newVersion = ''
        switch (increment) {
            case 'major':
                newVersion = "${(currentVersion.split("\\.")[0].toInteger() + 1)}.0.0"
                break
            case 'minor':
                newVersion = "${currentVersion.split("\\.")[0]}.${(currentVersion.split("\\.")[1].toInteger() + 1)}.0"
                break
            case 'patch':
                newVersion = "${currentVersion.split("\\.")[0]}.${currentVersion.split("\\.")[1]}.${(currentVersion.split("\\.")[2].toInteger() + 1)}"
                break
            default:
                println "No increment specified"
                return
        }

        ymlFile.text = ymlFile.text.replace("version: $currentVersion", "version: $newVersion")
        def gradleFile = file('build.gradle')
        gradleFile.text = gradleFile.text.replace("version = '${project.version}'", "version = '$newVersion-SNAPSHOT'")
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/festival/**/dto/*",
                    "com/festival/**/vo/*",
                    "com/festival/**/data/*",
                    "com/festival/**/exception/*",
                    "com/festival/**/scheduler/*",
                    "com/festival/**/*Config.class",
                    "com/festival/**/*Jdbc*.class",
                    "com/festival/**/Q*.class",
                    "com/festival/**/FestivalApplication.class",
            ])
        }))
    }
}
